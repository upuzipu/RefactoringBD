
openapi: 3.0.1
info:
  title: API для музыкальной платформы
  description: API для управления артистами, плейлистами и музыкальными треками
  version: 1.0
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: playlists
    description: API для управления плейлистами
  - name: auth
    description: Контроллер для регистрации и авторизации пользователей
  - name: artists
    description: Контроллер для работы с артистами
  - name: songs
    description: API для управления музыкальными треками
  - name: albums
    description: Контроллер для работы с альбомами
paths:
  /playlists:
    get:
      tags:
        - playlists
      summary: Получить список плейлистов
      description: Возвращает список плейлистов, соответствующих указанному имени.
      operationId: getAllPlaylistsByName
      parameters:
        - name: name
          in: query
          description: Имя плейлиста для поиска
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: Смещение для пагинации (по умолчанию 0)
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: Максимальное количество результатов (по умолчанию 1000)
          required: false
          schema:
            type: integer
            format: int32
            default: 1000
      responses:
        200:
          description: Список плейлистов успешно получен
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PlaylistSearchResponseDto"
        400:
          description: Некорректные параметры запроса
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PlaylistSearchResponseDto"
    post:
      tags:
        - playlists
      summary: Создать новый плейлист
      description: Создает новый плейлист от имени текущего пользователя.
      operationId: addNewPlaylist
      parameters:
        - name: playlistName
          in: query
          description: Имя нового плейлиста
          required: true
          schema:
            type: string
      responses:
        401:
          description: Пользователь не авторизован
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PlaylistCreationResponseDto"
        200:
          description: Плейлист успешно создан
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PlaylistCreationResponseDto"
  /playlists/{playlistId}/songs/{songId}:
    post:
      tags:
        - playlists
      summary: Добавить трек в плейлист
      description: Добавляет музыкальный трек в указанный плейлист.
      operationId: addMusicToPlaylist
      parameters:
        - name: playlistId
          in: path
          description: ID плейлиста
          required: true
          schema:
            type: integer
            format: int64
        - name: songId
          in: path
          description: ID музыкального трека
          required: true
          schema:
            type: integer
            format: int64
      responses:
        401:
          description: Пользователь не авторизован
        200:
          description: Трек успешно добавлен
    delete:
      tags:
        - playlists
      summary: Удалить трек из плейлиста
      description: Удаляет музыкальный трек из указанного плейлиста.
      operationId: removeMusicFromPlaylist
      parameters:
        - name: playlistId
          in: path
          description: ID плейлиста
          required: true
          schema:
            type: integer
            format: int64
        - name: songId
          in: path
          description: ID музыкального трека
          required: true
          schema:
            type: integer
            format: int64
      responses:
        401:
          description: Пользователь не авторизован
        201:
          description: Трек успешно удален
  /auth/registration:
    post:
      tags:
        - auth
      summary: Регистрация нового пользователя
      description: Позволяет зарегистрировать нового пользователя.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationRequestDto"
      responses:
        400:
          description: Некорректные данные для регистрации
        200:
          description: Пользователь успешно зарегистрирован
  /auth/authentication:
    post:
      tags:
        - auth
      summary: Авторизация существующего пользователя
      description: Позволяет авторизовать пользователя и получить JWT токен.
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationRequestDto"
      responses:
        400:
          description: Некорректные данные для авторизации
        401:
          description: Неавторизованный доступ
        200:
          description: Пользователь успешно авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponseDto"
  /songs:
    get:
      tags:
        - songs
      summary: Получить список треков
      description: Возвращает список треков, соответствующих указанному имени.
      operationId: getAllSongsByName
      parameters:
        - name: name
          in: query
          description: Имя трека для поиска (необязательно)
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: Смещение для пагинации (по умолчанию 0)
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: Максимальное количество результатов (по умолчанию 1000)
          required: false
          schema:
            type: integer
            format: int32
            default: 1000
      responses:
        200:
          description: Список треков успешно получен
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/SongSearchResponseDto"
        400:
          description: Некорректные параметры запроса
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/SongSearchResponseDto"
  /songs/{songId}:
    get:
      tags:
        - songs
      summary: Получить MP3-файл по ID трека
      description: Возвращает MP3-файл трека по его идентификатору.
      operationId: getMp3ById
      parameters:
        - name: songId
          in: path
          description: ID трека
          required: true
          schema:
            type: integer
            format: int64
      responses:
        404:
          description: Трек не найден
          content:
            "*/*":
              schema:
                type: array
                items:
                  type: string
                  format: byte
        200:
          description: MP3-файл успешно получен
          content:
            "*/*":
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /songs/user/{userId}:
    get:
      tags:
        - songs
      summary: Получить треки по ID пользователя
      description: Возвращает список треков, добавленных указанным пользователем.
      operationId: getAllSongsByUser
      parameters:
        - name: userId
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Список треков успешно получен
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SongResponseDto"
        404:
          description: Треки не найдены
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SongResponseDto"
  /songs/artist/{artistId}:
    get:
      tags:
        - songs
      summary: Получить треки по ID исполнителя
      description: Возвращает список треков, связанных с указанным исполнителем.
      operationId: getAllSongsByArtist
      parameters:
        - name: artistId
          in: path
          description: ID исполнителя
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Список треков успешно получен
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SongResponseDto"
        404:
          description: Треки не найдены
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SongResponseDto"
  /songs/album/{albumId}:
    get:
      tags:
        - songs
      summary: Получить треки по ID альбома
      description: Возвращает список треков, связанных с указанным альбомом.
      operationId: getAllSongsByAlbum
      parameters:
        - name: albumId
          in: path
          description: ID альбома
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Список треков успешно получен
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SongResponseDto"
        404:
          description: Треки не найдены
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SongResponseDto"
  /playlists/creator/{creatorId}:
    get:
      tags:
        - playlists
      summary: Получить плейлисты по ID создателя
      description: Возвращает список плейлистов, созданных указанным пользователем.
      operationId: getAllPlaylistsByCreator
      parameters:
        - name: creatorId
          in: path
          description: ID создателя плейлистов
          required: true
          schema:
            type: integer
            format: int64
      responses:
        404:
          description: Плейлисты не найдены
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlaylistResponseDto"
        200:
          description: Список плейлистов успешно получен
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlaylistResponseDto"
components:
  schemas:
    PlaylistCreationResponseDto:
      type: object
      properties:
        playlist_id:
          type: integer
          format: int64
    RegistrationRequestDto:
      required:
        - email
        - password
      type: object
      properties:
        password:
          maxLength: 16
          minLength: 8
          type: string
        email:
          type: string
        nickname:
          type: string
    AuthenticationRequestDto:
      required:
        - password
      type: object
      properties:
        password:
          maxLength: 16
          minLength: 8
          type: string
        email:
          type: string
    AuthenticationResponseDto:
      type: object
      properties:
        token:
          type: string
        email:
          type: string
    SongResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        artist:
          type: string
        genre:
          type: string
    SongSearchResponseDto:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: "#/components/schemas/SongResponseDto"
        count:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
    PlaylistResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        creator:
          type: string
        update_time:
          type: string
        creation_date:
          type: string
    PlaylistSearchResponseDto:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: "#/components/schemas/PlaylistResponseDto"
        count:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
    ArtistResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    ArtistSearchResponseDto:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: "#/components/schemas/ArtistResponseDto"
        count:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
    AlbumResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        artist:
          type: string
        creation_date:
          type: string
    AlbumSearchResponseDto:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: "#/components/schemas/AlbumResponseDto"
        count:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
